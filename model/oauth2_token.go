// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package model

import (
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
	"time"
)

const OauthTokenTableName string = "oauth_token"

// OauthToken is the golang structure for table oauth2_token.
type OauthToken struct {
	Id           uint   `orm:"id,primary"    json:"id"`            //
	AccessToken  string `orm:"access_token"  json:"access_token"`  // the token that authorizes and authenticates the requests.
	TokenSecret  string `orm:"token_secret"  json:"token_secret"`  // the token secret of oauth1
	TokenType    string `orm:"token_type"    json:"token_type"`    // the type of token.
	RefreshToken string `orm:"refresh_token" json:"refresh_token"` // a token that is used by the application  (as opposed to the user) to refresh the access token if it expires.
	ExpiresIn    int    `orm:"expires_in"    json:"expires_in"`    // how many seconds later the token expires
	Scope        string `orm:"scope"         json:"scope"`         // the token scope
	CreatedTime  int    `orm:"created_time"  json:"created_time"`  // created_time
	UpdatedTime  int    `orm:"updated_time"  json:"updated_time"`  // updated_time
}

func SaveOauthToken(token *OauthToken, tx *gdb.TX) (int64, error) {
	ot := &OauthToken{}
	err := tx.Model(OauthTokenTableName).Where(g.Map{"access_token": token.AccessToken, "token_type": token.TokenType}).Scan(ot)
	now := int(time.Now().Unix())
	token.UpdatedTime = now
	if err != nil || ot == nil {
		token.CreatedTime = now
		res, err := tx.Model(OauthTokenTableName).Data(token).Insert()
		if err != nil {
			return 0, err
		}
		return res.LastInsertId()
	}
	token.CreatedTime = ot.CreatedTime
	token.Id = ot.Id
	_, err = tx.Model(OauthTokenTableName).Data(token).Save()
	return int64(token.Id), err
}

func FindOauthTokenById(id int) (*OauthToken, error) {
	ot := &OauthToken{}
	err := g.Model(OauthTokenTableName).Where(g.Map{"id": id}).Scan(ot)
	return ot, err
}
